# Default values for mealie.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/mealie-recipes/mealie
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v3.3.1"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

commonLabels: {}
commonAnnotations: {}

updateStrategy: {}

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 9000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  labels: {}
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match Ignored if `affinity` is set.
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set.
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

timezone: UTC

mealie:
  # -- Allow user sign-up without token
  allowSignup: false
  # -- Used for notifications
  baseURL: http://mealie.local
  # -- The default group for users
  defaultGroup: Home
  # -- The default household for users in each group
  defaultHousehold: Family
  # -- The time in hours that a login/auth token is valid
  tokenTime: 48
  # -- Turns on/off access to the API documentation locally
  enableAPIDocs: false
  # -- The time of day to run daily server tasks, in HH:MM format. Use the
  # server's local time, not UTC
  dailyScheduleTime: "23:45"

  security:
    # -- Maximum times a user can provide an invalid password before their account is locked
    maxLoginAttempts: 5
    # -- Time in hours for how long a users account is locked
    userLockoutTime: 24

  postgresql:
    # -- Name of the postgres host
    host: postgres-rw
    # -- Port for the postgres host
    port: 5432
    # -- Name of the postgres database
    database: mealie
    # -- User to connect as to the postgres database
    user: mealie
    # -- Password for the postgres user
    password: mealie
    # -- Name of existing secret containing the PostgreSQL cluster details
    existingSecret: ""


  smtp:
    # -- Should SMTP be enabled?
    enabled: false
    # -- The SMTP server to use for sending emails.
    host: ""
    # -- The port to use for the SMTP server.
    port: 587
    # -- Use TLS when connecting to the server, typically for port 465.
    secure: false

    mailFrom:
      # -- The email address from which emails will be sent.
      address: ""
      # -- The name associated with the email address from which emails will be sent.
      name: "Mealie"

    auth:
      # -- The username for the SMTP server.
      username: ""
      # -- The password for the SMTP server.
      password: ""
      # -- An existing secret containing the SMTP server username and password.
      existingSecret: ""

  ldap:
    # -- Authenticate via an external LDAP server in addidion to built-in Mealie auth
    enabled: false
    # -- LDAP server URL (e.g. ldap://ldap.example.com)
    url: ""
    # -- Do not verify server certificate when using secure LDAP
    sslInsecure: false
    # -- File path to Certificate Authority used to verify server certificate
    # (e.g. /path/to/ca.crt)
    caCertFile: ""
    # -- Use STARTTLS to connect to the server
    enableStartTLS: false
    # -- Starting point when searching for users authentication (e.g. CN=Users,DC=xx,DC=yy,DC=de)
    baseDN: ""

    bind:
      # -- Should Mealie bind to the LDAP server for queries.
      enabled: false
      # -- Optional bind user for LDAP search queries
      # (e.g. cn=admin,cn=users,dc=example,dc=com). If None then anonymous bind will be used.
      username: ""
      # -- Optional password for the bind user used in queryBind
      password: ""
      # -- Existing secret with the ldap bind credentials (keys should be "username" and "password").
      existingSecret: ""

    # -- Optional LDAP filter to narrow down eligible users (e.g. (memberOf=cn=mealie_user,dc=example,dc=com))
    userFilter: ""
    # -- Optional LDAP filter, which tells Mealie the LDAP user is an admin (e.g. (memberOf=cn=admins,dc=example,dc=com))
    adminFilter: ""
    # -- The LDAP attribute that maps to the user's id
    idAttribute: uid
    # -- The LDAP attribute that maps to the user's name
    nameAttribute: name
    # -- The LDAP attribute that maps to the user's email
    mailAttribute: mail

  # For usage, see https://docs.mealie.io/documentation/getting-started/authentication/oidc-v2/
  oidc:
    # -- Enables authentication via OpenID Connect
    enabled: false
    # -- Enables new users to be created when signing in for the first time with OIDC
    signupEnabled: true
    # -- The URL to the OIDC configuration of your provider. This is usually something
    # like https://auth.example.com/.well-known/openid-configuration
    configurationURL: ""

    client:
      # -- The client id of your configured client in your provider
      id: ""
      # -- The client secret of your configured client in your provider
      secret: ""
      # -- Existing secret containing the client ID and secret (keys should be clientID and clientSecret)
      existingSecret: ""

    # -- If specified, only users belonging to this group will be able to successfully
    # authenticate, regardless of the OIDC_ADMIN_GROUP. For more information see
    # https://docs.mealie.io/documentation/getting-started/authentication/oidc/#groups
    userGroup: ""
    # -- If specified, users belonging to this group will be made an admin.
    # For more information see
    # https://docs.mealie.io/documentation/getting-started/authentication/oidc/#groups
    adminGroup: ""
    # -- If True, then the login page will be bypassed an you will be sent directly
    # to your Identity Provider. You can still get to the login page by adding
    # ?direct=1 to the login URL
    autoRedirect: false
    # -- The provider name is shown in SSO login button. "Login with <OIDC_PROVIDER_NAME>"
    providerName: "OAuth"
    # -- Because redirects bypass the login screen, you cant extend your session by
    # clicking the "Remember Me" checkbox. By setting this value to true, a session
    # will be extended as if "Remember Me" was checked
    rememberMe: false
    # -- The algorithm used to sign the id token (examples: RS256, HS256)
    signingAlgorithm: RS256
    # -- This is the claim which Mealie will use to look up an existing user
    # by (e.g. "email", "preferred_username")
    userClaim: email
    # -- This is the claim which Mealie will use for the users Full Name
    nameClaim: name
    # -- Optional if not using OIDC_USER_GROUP or OIDC_ADMIN_GROUP. This is the
    # claim Mealie will request from your IdP and will use to compare to
    # OIDC_USER_GROUP or OIDC_ADMIN_GROUP to allow the user to log in to Mealie
    # or is set as an admin. Your IdP must be configured to grant this claim
    groupsClaim: groups
    # -- Advanced configuration used to override the scopes requested from the IdP.
    # Most users won't need to change this. At a minimum, 'openid profile email' are required.
    scopesOverride: ""
    # -- File path to Certificate Authority used to verify server certificate (e.g. /path/to/ca.crt)
    tlsCACertFile: ""

  # For more details, see https://docs.mealie.io/documentation/getting-started/installation/open-ai/
  openAI: {}

  theming: {}

  # -- Persistence configuration
  persistence:
    enabled: false
    existingClaim: ""
    storageClassName: ""
    accessModes: ["ReadWriteOnce"]
    resources:
      requests:
        storage: "5Gi"

